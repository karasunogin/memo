学習した内容を記載していく

#pushすることをわすれないようにする
  -エラーがでてもpushはできるから一日の終わりのおこなう

#<label>とは
-フォームの中でフォームの項目名と構成部品（チェックボックス、ラジオボタンなど）を関連付けるためのタグ。
 関連付けを行うことにより、ブラウザでラベル（もしくはラベルのアクセスキー）をクリックした際に、その構成部品をクリックしたのと同じ動作が可能になる。
-サンプル
 <label for="name1">名前</label>

#アクション
 -ほとんどの更新処理はpatch
 --putもあったが、railsのアップグレード時に非推奨になった。

#アプリケーション設定
 -担当を分けるときは機能ごとに。
 -モデル・データベースをまず作る。
 -テストから作る
  商品が無ければ注文を作れないから。→テストデータを作る。

#コントローラーは複数形、モデルは単数形

#機能ごとにブランチ名を作る
-developは作業する場所ではない

#developから持ってくる
-git pull origin develop

#git checkout main
-切り替え

#git branch -D ブランチ名
-削除
 git checkout -b develop
-作成
 git commit --allow-empty -m ""
-空のコミット

#developで作業してしまったら
-commitまでならセーフ
--git log
--commitの横のコミット番号をコピー
--git reset --hard コミット番号


#全員の共通の不具合が起きた時の対処法

1. 作業者が自分のブランチのadd commit
2. developに移動
3. 修正用のブランチを作成
4. 上記のブランチで修正作業、push
5. プルリクエストでdevelopでmerge


1. 全員が自分のブランチのadd commit
2. developに移動
3. git pull origin develop
4. 自分のブランチに戻る
5. git merge origin/develop
6. コンフリクトがあれば解消

# git stash
-一旦置いていく

#<ul>と<ol>の違い
-<ul>は、黒ポチの箇条書き
-<ol>は、番号付きの箇条書き

#プルリクした後
-git checkout develop
-git pull origin develop
-git checkout 作業ブランチ
-git merge origin/develop

#git log
-今までのコミットの履歴

#git reset --head origin/ブランチ名
-ローカルのmainを、リモートのmainに強制的に合わせる。（作業していたデータが消えるから注意）

#rails c
-Customer.all　→登録している人の確認
-Customer.find(1).valid_password?('~パスワード入力~')　→その人のパスワード参照
-Customer.find(1).update(password:'~新しいパスワード入力~')　→その人の新しいパスワード入力
#resourse
-パソコンを使っている人がマイページしか見ないから:idがいらない

#コミットを取り消す方法
1.git reset --soft HEAD^ (git reset --hard HEAD^ ←これが)

2.git log --oneline
 コミットのログを一行で表す

3.git status
 緑の文字が出でいるか

 4.git restore --staged ファイル名

 5.git status
  赤い文字になっているか

6.git stash

7.git status
 何もないか確認

8.git stash clear
 スタッシュしたやつを消す

9.git stash
 確認

 #color
 -カキツバタ（杜若）色
    #3e62ad
-黒紅
    #302833

#Rails-pry
-rails cで使う。通常のirbの強化版がpry。
-Gemfileに gem 'pry-rails' を追記してbundle install。

#カラムの追加
-rails g migration Add カラム名 To テーブル名 カラム名:型名
ex)
-rails g migration Add Name To Lists name:string
-rails db:migrate

#カラムの削除
-rails g migration Remove カラム名 From テーブル名　カラム名:型名
ex)
-rails g migration Remove Name From Lists name:string
-rails db:migrate

#カラムのデータ型を変更する方法がある


#byebug
byebugのコマンドの入れる場所から下のコマンドの動作が止まる


#rails cのコマンド例

review = Review.new

review.customer_id = 1
review.title = "test"
review.body = "test"
s = review.save
s.errors.messages

s.errors.full_messages
review.errors.full_messages


#model & controller
-model 単数形
-controller 複数形



row w-100 align-items-center justify-content-

<div class="container about d-flex align-items-center justify-content-center mt-5">
  <div class="row mb-4">
      <%= image_tag "samune.png", size: "600x300", class: "image" %>
  </div>
</div>


<h2 class="text-center"><strong>新着レビュー</strong></h2>

 <div class="items dw-100">
<div class="row w-100 align-items-center justify-content-center">
    <div class="card-deck" class="col-sm-3">
      <% @reviews.each do |review| %>
      <div class="col-3">
      <div class="item my-3">
        <div class="card" style="background-color: #537188;">
          <%= link_to review_path(review), style: "color: #DDE6ED;" do %>
        <div class="card-header">
          <%= image_tag review.customer.get_profile_image, size:'30x30' %>
          <%= review.customer.name %>
        </div>
        <div class="card-body">
          <h4 class="card-title"><%= review.title %></h4>
          <p class="card-text">
          <div id="star<%= review.id %>"></div>
          <script>
            document.getElementById('star<%= review.id %>').innerHTML = ''
            raty(document.getElementById('star<%= review.id %>'), {
              starOn: '<%= asset_path('star-on.png') %>',
              starOff: '<%= asset_path('star-off.png') %>',
              starHalf: '<%= asset_path('star-half.png') %>',
              score: <%= review.star %>,
              half: true,
            })
          </script>
          </p>
          <p class="card-text"><small><%= review.body %></small></p>
        </div>
        <% end %>
      </div>
      </div>
      </div>
      <% end %>
    </div>
  </div>
  </div>

    <div class="mt-3 text-center">
      <%= link_to "全てのレビューを見る >>", reviews_path %>
    </div>

  </div>
</div>

#deviseのコントローラーの作成方法
-rails g controller public/homes



#デプロイ後の運用方法
1. Cloud9で編集後最新の状態をGitHubにpushする。
2. sshでCloud9からEC2にログインする。ssh -i ~/.ssh/practice-aws.pem ec2-user@52.194.49.60
3. cd アプリケーション名
4. git pull origin main
5. bundle install --path vendor/bundle --without test development
6. bundle exec rails assets:precompile RAILS_ENV=production
7. bundle exec rails db:migrate RAILS_ENV=production
8. sudo kill $(cat tmp/pids/puma.pid)
9. rails s -e production
10. ブラウザから、IPアドレスにアクセスして動作確認
11. sudo tail /var/log/nginx/error.log（エラー確認）


# current_customer.email === "guest@example.com"
# current_admin.present?


#<table>タグの中に入るタグは決まっている。<tr>/<td>…など
 render先が<div>なっていないか確認する。


#floatは小数点もいける型


#before_action :authenticate_user!, except: [:show, :index]
全てのアクションの前に、ユーザーがログインしているかどうか確認する！
ただし、showアクションと、indexアクションが呼び出された場合は、除くよ。という意味


#references型
references型は新しく作成するテーブルのカラムに、作成済みのテーブルを指定する場合に使う。
既存のテーブルを参照するので、reference（参照という意味）と言う。
モデル作成時にreferencesを使うことで、他のテーブルへの外部キーを設定することができる。
ex).各プロジェクトがどのクライアントに属しているかを指定するのが、references型


# $ cat /etc/os-release
Amazon Linux release 2 (Karoo)


git reset --hard c24bd2570e47ee73932078d7e9b6f1ecdf516c6


面接対策