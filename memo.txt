学習した内容を記載していく

#pushすることをわすれないようにする
  -エラーがでてもpushはできるから一日の終わりのおこなう

#<label>とは
-フォームの中でフォームの項目名と構成部品（チェックボックス、ラジオボタンなど）を関連付けるためのタグ。
 関連付けを行うことにより、ブラウザでラベル（もしくはラベルのアクセスキー）をクリックした際に、その構成部品をクリックしたのと同じ動作が可能になる。
-サンプル
 <label for="name1">名前</label>

#アクション
 -ほとんどの更新処理はpatch
 --putもあったが、railsのアップグレード時に非推奨になった。

#アプリケーション設定
 -担当を分けるときは機能ごとに。
 -モデル・データベースをまず作る。
 -テストから作る
  商品が無ければ注文を作れないから。→テストデータを作る。

#コントローラーは複数形、モデルは単数形

#機能ごとにブランチ名を作る
-developは作業する場所ではない

#developから持ってくる
-git pull origin develop

#git checkout main
-切り替え

#git branch -D ブランチ名
-削除
 git checkout -b develop
-作成
 git commit --allow-empty -m ""
-空のコミット

#developで作業してしまったら
-commitまでならセーフ
--git log
--commitの横のコミット番号をコピー
--git reset --hard コミット番号


#全員の共通の不具合が起きた時の対処法

1. 作業者が自分のブランチのadd commit
2. developに移動
3. 修正用のブランチを作成
4. 上記のブランチで修正作業、push
5. プルリクエストでdevelopでmerge


1. 全員が自分のブランチのadd commit
2. developに移動
3. git pull origin develop
4. 自分のブランチに戻る
5. git merge origin/develop
6. コンフリクトがあれば解消

# git stash
-一旦置いていく

#<ul>と<ol>の違い
-<ul>は、黒ポチの箇条書き
-<ol>は、番号付きの箇条書き

#プルリクした後
-git checkout develop
-git pull origin develop
-git checkout 作業ブランチ
-git merge origin/develop

#git log
-今までのコミットの履歴

#git reset --head origin/ブランチ名
-ローカルのmainを、リモートのmainに強制的に合わせる。（作業していたデータが消えるから注意）

#rails c
-Customer.all　→登録している人の確認
-Customer.find(1).valid_password?('~パスワード入力~')　→その人のパスワード参照
-Customer.find(1).update(password:'~新しいパスワード入力~')　→その人の新しいパスワード入力

#resourse
-パソコンを使っている人がマイページしか見ないから:idがいらない


#rails g controller admin/~~
header
admin/customers
 admin/orders
 admin/order_details